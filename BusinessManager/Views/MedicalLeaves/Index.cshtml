@model PagedList.StaticPagedList<BusinessManager.Application.ViewModel.HR.Employee.Work.ScheduleWork.MedicalLeave.MedicalLeaveForListViewModel>

@{
    ViewData["Title"] = "Index";
    bool isFiltering = !string.IsNullOrEmpty(ViewBag.CurrentFilter);
}

<div class="container text-center shadow p-4 mb-5 bg-white rounded">
    <form asp-action="Index" method="get">
        <div class="d-flex justify-content-center m-lg-auto">
            <div class="col-lg-5">
                <h2>Medical Leave List</h2>
            </div>
            <div class="col-lg-4">
                <div class="input-group">
                    <input type="text" class="form-control" name="searchString" value="@ViewBag.CurrentFilter" placeholder="Search by name">
                    <div class="input-group-append">
                        <button type="submit" class="btn btn-primary">Search</button>
                        <a href="@Url.Action("Index", new { searchString = "", page = 1 })" class="btn btn-secondary">Reset</a>
                    </div>
                </div>
            </div>
        </div>
    </form>

    <div style="overflow-x:auto;">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Nr.</th>
                    <th scope="col">
                        <a href="@Url.Action("Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })">Employee Name</a>
                    </th>
                    <th scope="col">
                        <a href="@Url.Action("Index", new { sortOrder = ViewBag.StartDateSortParm, currentFilter = ViewBag.CurrentFilter })">Start Date</a>
                    </th>
                    <th scope="col">
                        <a href="@Url.Action("Index", new { sortOrder = ViewBag.EndDateSortParm, currentFilter = ViewBag.CurrentFilter })">End Date</a>
                    </th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.TotalItemCount > 0)
                {
                    var counter = (Model.PageNumber - 1) * Model.PageSize + 1;
                    foreach (var item in Model)
                    {
                        <tr>
                            <th scope="row">@counter</th>
                            <td>@item.FirstName @item.LastName</td>
                            <td>@item.StartDate.ToString("yyyy-MM-dd")</td>
                            <td>@item.EndDate.ToString("yyyy-MM-dd")</td>
                            <td class="d-flex justify-content-around">
                                @Html.ActionLink("Edit", "Edit", new { id = item.Id }, new { @class = "btn btn-primary btn-sm" })
                                @Html.ActionLink("Details", "Details", new { id = item.Id }, new { @class = "btn btn-info btn-sm" })
                                @Html.ActionLink("Delete", "Delete", new { id = item.Id }, new { @class = "btn btn-danger btn-sm" })
                            </td>
                        </tr>
                        counter++;
                    }
                }
                else
                {
                    <tr class="alert alert-warning">
                        <td colspan="7"><strong>No Medical Leaves Data</strong></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="d-flex justify-content-between border-top pt-3 mt-3">
        <div>
            <p class="mb-0">Total Medical Leaves: @Model.TotalItemCount</p>
        </div>
        <div>
            <p class="mb-0">Page @(Model.PageNumber) of @(Model.PageCount)</p>
        </div>
        <div>
            @if (Model.HasPreviousPage)
            {
                @Html.ActionLink("Previous", "Index", new { page = Model.PageNumber - 1, searchString = ViewBag.CurrentFilter }, new { @class = "btn btn-primary" })
            }

            @if (!isFiltering && Model.PageNumber > 1)
            {
                @Html.ActionLink("Back to Start", "Index", new { page = 1 }, new { @class = "btn btn-secondary" })
            }

            @if (Model.HasNextPage)
            {
                @Html.ActionLink("Next", "Index", new { page = Model.PageNumber + 1, searchString = ViewBag.CurrentFilter }, new { @class = "btn btn-primary" })
            }
        </div>
    </div>
</div>

